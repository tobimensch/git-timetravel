#!/usr/bin/env python3
"""travel back in time in a git repository, by just entering
 * a number of commits you want to go back (or a hash).
 * When you want to get back to 'now' including the local changes
 * git-timetravel now takes you back into the future.
 * Repository and issue-tracker: https://github.com/tobimensch/git-timetravel
 * Licensed under terms of MIT license (see LICENSE-MIT)
 * Copyright (c) 2014 Tobias Glaesser

"""
import os
import sys
import re
import datetime
import subprocess
import tempfile

from docopt import docopt

__all__ = ['git-timetravel']
__version__ = '0.2.0'

doc ='''
Usage:
  git-timetravel back [NUM]
  git-timetravel forward [NUM]
  git-timetravel anchor
  git-timetravel <commit>
  git-timetravel --print-anchor
  git-timetravel --help
  git-timetravel --version

Travel in time through your git repository.
Then go back to the future with git-timetravel anchor,
not losing any local changes.

When you first go back using <commit> or back [num]
git-timetravel remembers where you were as the anchor.
If you then use the anchor command at any time you'll be taken
back to that anchor.

This tool is intended for trying earlier revisions of code,
i.e. to test for regressions.

arguments:
  <commit>                     go back to specific commit
                               will refuse going forward

commands:
  back [NUM]                   go back by [NUM] commits
                               (default is 1)
  forward [NUM]                go forward by [NUM] commits
                               (default is 1)
  anchor                       get back to the anchor including
                               any local changes

Options:
  -h, --help                   show this help message and exit
  -v, --version                display version information
  -a, --print-anchor           prints the saved anchor

'''

opt = docopt(doc,None,True,__version__)

def set_anchor():
    head = read_head()
    if head == None:
        print("Error: couldn't read HEAD, exiting")
        exit(0)

    a = get_anchor()
    if a != None:
        print("Error: Will not set timetravel anchor, because one is set already")
        return
    #only set anchor if none is set
    f = open('.git/timetravel_anchor','w+')
    f.write(head.decode())
    f.close()

def get_anchor():
    ''
    try:
        f = open('.git/timetravel_anchor','r')
    except:
        return None
    if f:
        a = f.readline()
        f.close()
        if a == '':
            return None
        else:
            #test if a is a valid anchor
            return a.strip()
    else:
        return None     

    #if no anchor is set return None

def read_head():
    p = subprocess.Popen(['git','symbolic-ref','--short','HEAD'], stdout=subprocess.PIPE)
    out, err = p.communicate()
    if p.returncode != 0:
        print("Error while running git symbolic-ref HEAD ... not secure to continue")
        exit(1)
    head = out.strip()
    return head

def get_num(n):
    if n:
        return n
    return "1"

def travel_to_anchor():
    #travel to anchor / git checkout (anchor)
    a = get_anchor()
    if a == None:
        print("Error: No anchor found, can't travel.")
        exit(0)
    #validation of anchor?
    #stash local changes so there's no problem traveling
    stash_changes()
    p = subprocess.Popen(['git','checkout',a], stdout=subprocess.PIPE)
    #then remove the anchor
    os.unlink('.git/timetravel_anchor')
    #then apply stashed changes
    stash_apply()

def stash_apply():
    #find out if there are local changes
    #if so create stash
    p = subprocess.call('git stash apply',shell=True)
    if p != 0:
        print("Error while running git stash... not secure to continue")
        exit(1)

def stash_changes():
    if not are_there_changes():
        return #nothing to stash my friend

    #find out if there are local changes
    #if so create stash
    p = subprocess.call('git stash',shell=True)
    if p != 0:
        print("Error while running git stash... not secure to continue")
        exit(1)

def are_there_changes():
    p = subprocess.Popen(['git','diff'], stdout=subprocess.PIPE)
    out, err = p.communicate()
    if p.returncode != 0:
        print("Error while running git diff... not secure to continue")
        exit(1)
    if out == '':
        #apparently no changes
        return False
    else:
        return True

def travel_to(destination):
    print("Charging timemachine with energy... 1 ... 2 ... 3 ... ")
    set_anchor()
    stash_changes() 
    print('git checkout '+destination)
    subprocess.call('git checkout '+destination,shell=True)

if opt['--print-anchor']:
    print(get_anchor())
    exit(0)

if opt['anchor']: #going back to the way things were #back to the future
    travel_to_anchor()
    exit(0)

elif opt['back']:
    num = get_num(opt['NUM'])
    travel_to("HEAD~"+num)

elif opt['forward']: #similar to back but also very different
    #first we have to go to the anchor
    #then we can go forward by not going backward too much
    #while keeping the original anchor
    #exit when there's no anchor
    if get_anchor() == None:
        print("Error: No anchor found, can't travel forward")
        exit(1)

    p = subprocess.Popen(['git','rev-parse','HEAD'], stdout=subprocess.PIPE)
    out, err = p.communicate()
    if p.returncode != 0:
        print("Error while runing git rev-parse HEAD ... not secure to continue")
        exit(1)
    current_commit = out.strip()
    travel_to_anchor()
    p = subprocess.Popen(['git','rev-list','--reverse','HEAD'], stdout=subprocess.PIPE)
    out, err = p.communicate()
    if p.returncode != 0:
        print("Error while runing git rev-list --reverse HEAD ... not secure to continue")
        exit(1)
    found = False
    num = int(get_num(opt['NUM']).strip())
    target_commit=''
    for line in out.split("\n"):
        if found == True:
            num-=1
            if num == 0:
                target_commit=line.strip()
                break
            continue
        if line.strip() == current_commit:
            found = True
    if target_commit != '':
        travel_to(target_commit)

elif opt['<commit>']: #similar to back
    #find out if <commit> is in past commits relative to current commit
    p = subprocess.Popen(['git','rev-list','HEAD'], stdout=subprocess.PIPE)
    out, err = p.communicate()
    if p.returncode != 0:
        print("Error while runing git rev-list HEAD ... not secure to continue")
        exit(1)
    found = False
    for line in out.split("\n"):
        if line.strip() == opt['<commit>']:
            found = True

    if found == True:
        travel_to(opt['<commit>'])

